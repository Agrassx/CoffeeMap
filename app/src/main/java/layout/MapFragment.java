package layout;import android.app.AlertDialog;import android.app.Fragment;import android.app.FragmentManager;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.SharedPreferences;import android.graphics.Color;import android.graphics.drawable.Drawable;import android.location.Location;import android.os.Bundle;import android.provider.Settings;import android.support.design.widget.FloatingActionButton;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.animation.AlphaAnimation;import android.view.animation.Animation;import android.widget.Button;import android.widget.ImageView;import android.widget.TextView;import android.widget.Toast;import com.agrass.coffeemap.CafeItem;import com.agrass.coffeemap.CafeOverlay;import com.agrass.coffeemap.ClientIntentRequest;import com.agrass.coffeemap.CurrentLocationManager;import com.agrass.coffeemap.JsonTaskHandler;import com.agrass.coffeemap.R;import com.agrass.coffeemap.RetinaTileSource;import com.flipboard.bottomsheet.BottomSheetLayout;import com.flipboard.bottomsheet.OnSheetDismissedListener;import org.osmdroid.ResourceProxy;import org.osmdroid.api.IGeoPoint;import org.osmdroid.events.DelayedMapListener;import org.osmdroid.events.MapListener;import org.osmdroid.events.ScrollEvent;import org.osmdroid.events.ZoomEvent;import org.osmdroid.tileprovider.MapTileProviderBasic;import org.osmdroid.tileprovider.tilesource.ITileSource;import org.osmdroid.util.BoundingBoxE6;import org.osmdroid.util.GeoPoint;import org.osmdroid.util.ResourceProxyImpl;import org.osmdroid.views.MapView;import org.osmdroid.views.overlay.ItemizedIconOverlay;import org.osmdroid.views.overlay.TilesOverlay;import java.util.ArrayList;public class MapFragment extends Fragment {    private static final String MAP_PREFS = "MapPrefs";    private static final String MAP_PREFS_SCROLL_X = "scrollX";    private static final String MAP_PREFS_SCROLL_Y = "scrollY";    private static final String MAP_PREFS_ZOOM_LEVEL = "zoom";    private static final String BASE_URLS[] = {            "http://a.tilessputnik.ru/tiles/kmt2/",            "http://b.tilessputnik.ru/tiles/kmt2/",            "http://c.tilessputnik.ru/tiles/kmt2/",            "http://d.tilessputnik.ru/tiles/kmt2/"};    protected MapView SputnikMap;    protected TilesOverlay mTilesOverlay;    private SharedPreferences settings;    private GeoPoint Moscow = new GeoPoint(55751556, 37624482);    private BottomSheetLayout bottomSheetLayout;    private ResourceProxy mResourceProxy;    private CafeOverlay coffeeOverlay;    private Drawable drawable;    private View bottomSheetView;    private Drawable returnDrawable;    private Animation FadeInAnim = new AlphaAnimation(0, 1);    private Animation FadeOutAnim = new AlphaAnimation(1, 0);    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        FadeInAnim.setDuration(500);        FadeOutAnim.setDuration(500);    }    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {        super.onCreateView(inflater, container, savedInstanceState);        mResourceProxy = new ResourceProxyImpl(inflater.getContext().getApplicationContext());        drawable = mResourceProxy.getDrawable(ResourceProxy.bitmap.marker_default);        drawable = getResources().getDrawable(R.drawable.marker01, null);        drawable = getResources().getDrawable(R.drawable.ic_place_36dp, null);        SputnikMap = new MapView(inflater.getContext(), 256, mResourceProxy);        return SputnikMap;    }    @Override    public void onActivityCreated(Bundle savedInstanceState) {        super.onActivityCreated(savedInstanceState);        bottomSheetLayout = (BottomSheetLayout) getActivity().findViewById(R.id.bottomSheet);        bottomSheetLayout.setPeekOnDismiss(true);        bottomSheetLayout.setVerticalScrollBarEnabled(true);        bottomSheetView = getActivity().getLayoutInflater().inflate(R.layout.bottom_sheet,                bottomSheetLayout, false);        Context context = getActivity().getBaseContext();        settings = context.getSharedPreferences(MAP_PREFS, Context.MODE_PRIVATE);        float scale = SputnikMap.getResources().getDisplayMetrics().density;        int imageSize = (int) (256 * scale);        ITileSource tileSource = new RetinaTileSource("Sputnik", null, 1, 18, imageSize, ".png", BASE_URLS);        SputnikMap.setTileSource(tileSource);        MapTileProviderBasic mProvider = new MapTileProviderBasic(context, tileSource);        mTilesOverlay = new TilesOverlay(mProvider, context);        mTilesOverlay.setLoadingBackgroundColor(Color.TRANSPARENT);        SputnikMap.getOverlays().clear();        SputnikMap.getOverlays().add(mTilesOverlay);        SputnikMap.setMultiTouchControls(true);        SputnikMap.getController().setZoom(settings.getInt(MAP_PREFS_ZOOM_LEVEL, 11));        SputnikMap.getController().setCenter(new GeoPoint(settings.getFloat(MAP_PREFS_SCROLL_X,                (float) Moscow.getLatitude()), settings.getFloat(MAP_PREFS_SCROLL_Y,                (float) Moscow.getLongitude())));        MapListener mapListener = new MapListener() {            @Override            public boolean onScroll(ScrollEvent event) {                refreshCoffeeOverlay();                return false;            }            @Override            public boolean onZoom(ZoomEvent event) {                refreshCoffeeOverlay();                return false;            }        };        SputnikMap.setMapListener(new DelayedMapListener(mapListener, 250));        final FloatingActionButton buttonAddPoint = (FloatingActionButton) getActivity().findViewById(R.id.buttonAddPoint);        final FloatingActionButton buttonCurrentPosition = (FloatingActionButton) getActivity().findViewById(R.id.buttonCurrentLocation);        final Button dialogButCancel = (Button) getActivity().findViewById(R.id.dialogButCancel);        final Button dialogButOk = (Button) getActivity().findViewById(R.id.dialogButOk);        dialogButOk.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                IGeoPoint location = SputnikMap.getMapCenter();                FragmentManager fragmentManager = getFragmentManager();                Fragment addCafeFragment = new AddCafeFragment();                Bundle bundle = new Bundle();                bundle.putDouble("Latitude", location.getLatitude());                bundle.putDouble("Longitude", location.getLongitude());                addCafeFragment.setArguments(bundle);                fragmentManager.beginTransaction()                        .addToBackStack("MapFragment")                        .hide(MapFragment.this)                        .replace(R.id.fragment_container, addCafeFragment)                        .commit();                Log.wtf("Change fragment button", "Was clicked");            }        });        dialogButCancel.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                changeVisibilityOfButtons();            }        });        buttonAddPoint.setOnClickListener(new View.OnClickListener() {            public void onClick(View v) {                changeVisibilityOfButtons();            }        });        buttonCurrentPosition.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {            }        });    }    public void changeVisibilityOfButtons() {        Button dialogButOk = (Button) getActivity().findViewById(R.id.dialogButOk);        Button dialogButCancel = (Button) getActivity().findViewById(R.id.dialogButCancel);        FloatingActionButton buttonAddPoint = (FloatingActionButton) getActivity().findViewById(R.id.buttonAddPoint);        ImageView newCafeMarker = (ImageView) getActivity().findViewById(R.id.imageViewCenterMarker);        if (buttonAddPoint.getVisibility() == View.VISIBLE) {            buttonAddPoint.setVisibility(View.INVISIBLE);            dialogButOk.setVisibility(View.VISIBLE);            dialogButCancel.setVisibility(View.VISIBLE);            newCafeMarker.setVisibility(View.VISIBLE);        } else {            buttonAddPoint.setVisibility(View.VISIBLE);            dialogButOk.setVisibility(View.INVISIBLE);            dialogButCancel.setVisibility(View.INVISIBLE);            newCafeMarker.setVisibility(View.INVISIBLE);        }    }    @Override    public void onPause() {        SharedPreferences.Editor editor = settings.edit();        editor.putFloat(MAP_PREFS_SCROLL_X, (float) SputnikMap.getMapCenter().getLatitude());        editor.putFloat(MAP_PREFS_SCROLL_Y, (float) SputnikMap.getMapCenter().getLongitude());        editor.putInt(MAP_PREFS_ZOOM_LEVEL, SputnikMap.getZoomLevel());        editor.apply();        super.onPause();    }    @Override    public void onResume() {        super.onResume();    }    private void refreshCoffeeOverlay() {        final Context context = this.getActivity().getApplication().getBaseContext();        Intent intent = new Intent(context, ClientIntentRequest.class);        BoundingBoxE6 boxE6 = SputnikMap.getBoundingBox();        ClientIntentRequest request = new ClientIntentRequest(context);        JsonTaskHandler taskHandler = new JsonTaskHandler() {            @Override            public void taskSuccessful(ArrayList<CafeItem> overlayItemArrayList) {                SputnikMap.getOverlays().remove(coffeeOverlay);                SputnikMap.invalidate();                coffeeOverlay = new CafeOverlay(overlayItemArrayList, drawable,                        new ItemizedIconOverlay.OnItemGestureListener<CafeItem>() {                            @Override                            public boolean onItemSingleTapUp(int index, CafeItem item) {                                returnDrawable = item.getDrawable();                                item.setMarker(drawable);                                SputnikMap.invalidate();                                showMenuSheet(item);                                return true;                            }                            @Override                            public boolean onItemLongPress(int index, CafeItem item) {                                return true;                            }                }, mResourceProxy);                SputnikMap.getOverlays().add(coffeeOverlay);                SputnikMap.invalidate();            }            @Override            public void taskFailed() {                Log.wtf("Task", "FAILED");            }        };        request.setJsonTaskHandler(taskHandler);        request.setBoundingBox(boxE6);        request.onHandleIntent(intent);    }    private void showMenuSheet(final CafeItem item) {        final TextView textName = (TextView) bottomSheetView.findViewById(R.id.name);        final TextView textfullOH = (TextView) bottomSheetView.findViewById(R.id.FullOH);        final TextView textOpenHour = (TextView) bottomSheetView.findViewById(R.id.open_hour);        textName.setText(item.getName() != null ? item.getName() : "name is null");        textfullOH.setText(item.getSchedule() != null ? item.getSchedule() : "OH null");        textfullOH.setVisibility(View.INVISIBLE);        textOpenHour.setText(item.getEndTimeWork() != null ? item.getEndTimeWork() : "time is null");        bottomSheetLayout.addOnSheetStateChangeListener(new BottomSheetLayout.OnSheetStateChangeListener() {            @Override            public void onSheetStateChanged(BottomSheetLayout.State state) {                if (state.equals(BottomSheetLayout.State.EXPANDED)) {                    textfullOH.setVisibility(View.VISIBLE);                    textfullOH.startAnimation(FadeInAnim);                } else {                    textfullOH.setVisibility(View.INVISIBLE);                    textfullOH.startAnimation(FadeOutAnim);                }            }        });        bottomSheetLayout.addOnSheetDismissedListener(new OnSheetDismissedListener() {            @Override            public void onDismissed(BottomSheetLayout bottomSheetLayout) {                item.setMarker(returnDrawable);                SputnikMap.invalidate();            }        });        bottomSheetLayout.showWithSheetView(bottomSheetView);    }    private Location enableLocationManager() {        try {            CurrentLocationManager curLocManager = new CurrentLocationManager(getActivity());            Location location = curLocManager.getCurrentLocation();            Toast.makeText(getActivity(),                    String.valueOf(location.getLatitude()) +                            String.valueOf(location.getLongitude()),                    Toast.LENGTH_LONG).show();            return location;        } catch (Exception err) {            Log.wtf("Location manager exception", err.getMessage());        }        return null;    }    private void scrollOnMarker(IGeoPoint markerGeoPoint, CafeItem item) {        SputnikMap.getController().animateTo(markerGeoPoint);    }    public void showInternetAlertDialog(final Context context) {        AlertDialog.Builder alertDialog = new AlertDialog.Builder(context);        alertDialog.setTitle("GPS is settings");        alertDialog.setMessage("GPS is not enabled. Do you want to go to settings menu?");        alertDialog.setIcon(R.drawable.ic_vpn_lock_24dp);        alertDialog.setPositiveButton("Settings", new DialogInterface.OnClickListener() {            public void onClick(DialogInterface dialog,int which) {                Intent intent = new Intent(Settings.ACTION_NETWORK_OPERATOR_SETTINGS);                context.startActivity(intent);            }        });        alertDialog.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {            public void onClick(DialogInterface dialog, int which) {                dialog.cancel();            }        });        alertDialog.show();    }    public void showGPSAlertDialog(final Context mContext) {        AlertDialog.Builder alertDialog = new AlertDialog.Builder(mContext);        alertDialog.setTitle("GPS is not enabled ");        alertDialog.setMessage("GPS is not enabled. Do you want to go to settings menu?");        alertDialog.setIcon(R.drawable.ic_gps_off_24dp);        alertDialog.setPositiveButton("Settings", new DialogInterface.OnClickListener() {            public void onClick(DialogInterface dialog,int which) {                Intent intent = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);                mContext.startActivity(intent);            }        });        alertDialog.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {            public void onClick(DialogInterface dialog, int which) {                dialog.cancel();            }        });        alertDialog.show();    }}